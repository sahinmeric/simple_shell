.TH Shell 3 "5 Diciember 2021" "Custom Man Pagel"

.SH NAME
.B Simple Shell - a simple UNIX command interpreter in C

.SH SYNOPSIS
simple_shell [command] [file]

.SH DESCRIPTION
.PP
At its base, a shell is simply a macro processor that executes commands. 
The termination macro processor means functionality where text and
symbols are expanded to create larger expressions.

.PP
A Unix shell is both a command interpreter and a programming language.
As a command interpreter, the shell provides the user interface to
the rich set of GNU utilities. The programming language features 
allow these utilities to be combined. Files containing commands
can be created, and become commands themselves. 
These new commands have the same status as system commands
in directories such as /bin, allowing users or groups to establish
custom environments to automate their common tasks.

.PP
A shell allows execution of GNU commands, both synchronously and asynchronously. 
The shell waits for synchronous commands to complete before accepting more input; 
asynchronous commands continue to execute in parallel with the shell while 
it reads and executes additional commands. The redirection constructs permit
fine-grained control of the input and output of those commands. Moreover,
the shell allows control over the contents of commandsâ€™ environments.

.PP
Shells also provide a small set of built-in commands (builtins) implementing
functionality impossible or inconvenient to obtain via separate utilities.
For example, cd, break, continue, and exec cannot be implemented outside of
the shell because they directly manipulate the shell itself. The history, getopts,
kill, or pwd builtins, among others, could be implemented in separate utilities,
but they are more convenient to use as builtin commands. 
All of the shell builtins are described in subsequent sections.

.B hsh
Is the executable that will interpret the command. It executes it and then,
exit. With exit, an exit status returns with the status of the previous command
executed. For instance, status is 0 on non-execution.


.SH MODES
 Shells may be used interactively or non-interactively. In interactive mode,
 they accept input typed from the keyboard. 
 When executing non-interactively, shells executecommands read from a file.

.SH INTERACTIVE MODE EXAMPLE
.PP
.PP
$ ./hsh
.PP
##---> /bin/ls
.PP
hsh main.c shell.c
.PP
##---> exit
.PP
$
.PP
.PP
.SH NON-INTERACTIVE MODE EXAMPLE
.PP
.PP
$ echo "/bin/ls" | ./hsh
.PP
.PP
hsh main.c shell.c test_ls_1
.SH ENVIRONMENT
When the shell is invoked, it is given an array of strings called
the environment. Note that string is a copy. The strings are environment
variables and are represented in this format
.B name=value
.
.SH BUILTIN COMMANDS

Shells also provide a small set of built-in commands (builtins) implementing
functionality impossible or inconvenient to obtain via separate utilities.
For example, cd, break, continue, and exec cannot be implemented outside of
the shell because they directly manipulate the shell itself. 
The history, getopts, kill, or pwd builtins, among others, could be
implemented in separate utilities, but they are more convenient
to use as builtin commands.

.B The following commands are executed in the shell as builtins


.B exit

	Exits the shell

.B env

	Prints the variables from the current environment

.SH AUTHORS
.B 3964@holbertonschool.com - Sahin Meric
.B 3337@holbertonschool.com - Lucila Mociulsky
